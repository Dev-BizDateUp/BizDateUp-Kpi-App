
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.15.0
 * Query Engine version: 85179d7826409ee107a6ba334b5e305ae3fba9fb
 */
Prisma.prismaVersion = {
  client: "6.15.0",
  engine: "85179d7826409ee107a6ba334b5e305ae3fba9fb"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.DepartmentsScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.DesignationsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  department_id: 'department_id'
};

exports.Prisma.EmployeesScalarFieldEnum = {
  id: 'id',
  employee_id: 'employee_id',
  name: 'name',
  department_id: 'department_id',
  designation_id: 'designation_id',
  company: 'company',
  employee_type: 'employee_type',
  phone: 'phone',
  email: 'email',
  image: 'image',
  status: 'status',
  role_id: 'role_id'
};

exports.Prisma.Kpi_frequenciesScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.Kpi_periodsScalarFieldEnum = {
  id: 'id',
  frequency_id: 'frequency_id',
  year: 'year',
  month: 'month',
  quarter: 'quarter',
  start_date: 'start_date',
  end_date: 'end_date'
};

exports.Prisma.Kpi_valuesScalarFieldEnum = {
  id: 'id',
  kpi_id: 'kpi_id',
  employee_id: 'employee_id',
  period_id: 'period_id',
  value_achieved: 'value_achieved'
};

exports.Prisma.KpisScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  frequency_id: 'frequency_id',
  target: 'target',
  designation_id: 'designation_id',
  green_threshold: 'green_threshold',
  yellow_threshold: 'yellow_threshold'
};

exports.Prisma.CredentialsScalarFieldEnum = {
  id: 'id',
  email: 'email',
  passhash: 'passhash'
};

exports.Prisma.Manager_reviewScalarFieldEnum = {
  id: 'id',
  review_date: 'review_date',
  manager_name: 'manager_name',
  employee_id: 'employee_id',
  summary_kpi: 'summary_kpi',
  strengths: 'strengths',
  improvement: 'improvement',
  comment: 'comment',
  actions: 'actions',
  goals: 'goals',
  rating: 'rating'
};

exports.Prisma.AppraisalScalarFieldEnum = {
  id: 'id',
  employee_id: 'employee_id',
  start: 'start',
  end: 'end',
  manager_name: 'manager_name',
  review_date: 'review_date',
  kpi_achieved_percentage: 'kpi_achieved_percentage',
  competency_name: 'competency_name',
  competency_rating: 'competency_rating',
  competency_remarks: 'competency_remarks',
  achievements: 'achievements',
  a_o_improve: 'a_o_improve',
  overall_rating: 'overall_rating',
  revised_ctc: 'revised_ctc',
  new_designation_id: 'new_designation_id',
  bonus: 'bonus',
  goals: 'goals'
};

exports.Prisma.RolesScalarFieldEnum = {
  id: 'id',
  power: 'power',
  name: 'name'
};

exports.Prisma.Kpi_targetScalarFieldEnum = {
  id: 'id',
  employee_id: 'employee_id',
  target: 'target',
  kpi_id: 'kpi_id'
};

exports.Prisma.Admin_actionsScalarFieldEnum = {
  action_id: 'action_id',
  badge_id: 'badge_id',
  admin_id: 'admin_id',
  action: 'action',
  created_at: 'created_at'
};

exports.Prisma.BadgesScalarFieldEnum = {
  badge_id: 'badge_id',
  user_id: 'user_id',
  status: 'status',
  comment: 'comment',
  created_at: 'created_at',
  receiver_id: 'receiver_id',
  lastupdated_by: 'lastupdated_by',
  reason: 'reason'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  departments: 'departments',
  designations: 'designations',
  employees: 'employees',
  kpi_frequencies: 'kpi_frequencies',
  kpi_periods: 'kpi_periods',
  kpi_values: 'kpi_values',
  kpis: 'kpis',
  credentials: 'credentials',
  manager_review: 'manager_review',
  appraisal: 'appraisal',
  roles: 'roles',
  kpi_target: 'kpi_target',
  admin_actions: 'admin_actions',
  badges: 'badges'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
