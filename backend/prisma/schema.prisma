generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model departments {
  id           Int            @id @default(autoincrement())
  name         String?        @unique @db.VarChar
  designations designations[]
  employees    employees[]
}

model designations {
  id            Int          @id @default(autoincrement())
  name          String?      @unique @db.VarChar
  department_id Int?
  departments   departments? @relation(fields: [department_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_designations_department")
  employees     employees[]
  kpis          kpis[]
}

model employees {
  id                                   Int              @id @default(autoincrement())
  employee_id                          String?          @unique @db.VarChar
  name                                 String           @db.VarChar
  department_id                        Int?
  designation_id                       Int?
  company                              String?          @db.VarChar
  employee_type                        String?          @db.VarChar
  phone                                String?          @db.VarChar
  email                                String?          @db.VarChar
  image                                String?          @db.VarChar
  status                               String?          @db.VarChar
  role_id                              Int?
  admin_actions                        admin_actions[]
  appraisal                            appraisal[]
  badges_badges_receiver_idToemployees badges[]         @relation("badges_receiver_idToemployees")
  badges_badges_user_idToemployees     badges[]         @relation("badges_user_idToemployees")
  departments                          departments?     @relation(fields: [department_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_employees_department")
  designations                         designations?    @relation(fields: [designation_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_employees_designation")
  roles                                roles?           @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_employees_role")
  kpi_target                           kpi_target[]
  kpi_values                           kpi_values[]
  manager_review                       manager_review[]
}

model kpi_frequencies {
  id          Int           @id @default(autoincrement())
  name        String?       @unique @db.VarChar
  kpi_periods kpi_periods[]
  kpis        kpis[]
}

model kpi_periods {
  id              Int              @id @default(autoincrement())
  frequency_id    Int?
  year            Int
  month           Int?
  quarter         Int?
  start_date      DateTime?        @db.Date
  end_date        DateTime?        @db.Date
  kpi_frequencies kpi_frequencies? @relation(fields: [frequency_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_kpi_periods_frequency")
  kpi_values      kpi_values[]
}

model kpi_values {
  id             Int          @id @default(autoincrement())
  kpi_id         Int?
  employee_id    Int?
  period_id      Int?
  value_achieved Float
  employees      employees?   @relation(fields: [employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_kpi_values_employee")
  kpis           kpis?        @relation(fields: [kpi_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_kpi_values_kpi")
  kpi_periods    kpi_periods? @relation(fields: [period_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_kpi_values_period")
}

model kpis {
  id               Int              @id @default(autoincrement())
  title            String           @db.VarChar
  description      String?
  frequency_id     Int?
  target           Float?
  designation_id   Int?
  green_threshold  Float?
  yellow_threshold Float?
  kpi_target       kpi_target[]
  kpi_values       kpi_values[]
  designations     designations?    @relation(fields: [designation_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_kpis_designation")
  kpi_frequencies  kpi_frequencies? @relation(fields: [frequency_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_kpis_frequency")
}

model credentials {
  id       Int    @id @default(autoincrement())
  email    String @unique @db.VarChar
  passhash String @db.VarChar
}

model manager_review {
  id           Int        @id @default(autoincrement())
  review_date  DateTime?  @db.Timestamptz(6)
  manager_name String?    @db.VarChar
  employee_id  Int?
  summary_kpi  String?
  strengths    String?
  improvement  String?
  comment      String?
  actions      String[]
  goals        String?
  rating       Int?
  employees    employees? @relation(fields: [employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_manager_review_employee")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model appraisal {
  id                      Int       @id @default(autoincrement())
  employee_id             Int
  start                   DateTime  @db.Date
  end                     DateTime  @db.Date
  manager_name            String    @db.VarChar
  review_date             DateTime  @db.Date
  kpi_achieved_percentage Float     @db.Real
  competency_name         String[]
  competency_rating       Int[]
  competency_remarks      String[]
  achievements            String?   @default("")
  a_o_improve             String?   @default("")
  overall_rating          Int?      @default(0)
  revised_ctc             Float?    @db.Real
  new_designation_id      Int?
  bonus                   Float?    @db.Real
  goals                   String?
  employees               employees @relation(fields: [employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_appraisal_employee")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model roles {
  id        Int         @id @default(autoincrement())
  power     Int?        @default(0)
  name      String      @db.VarChar
  employees employees[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model kpi_target {
  id          Int       @id @default(autoincrement())
  employee_id Int
  target      Decimal?  @db.Decimal
  kpi_id      Int
  employees   employees @relation(fields: [employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_kpi_target_employee")
  kpis        kpis      @relation(fields: [kpi_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_kpi_target_kpi")
}

model admin_actions {
  action_id  Int       @id @default(autoincrement())
  badge_id   Int
  admin_id   Int
  action     String    @db.VarChar(20)
  note       String?
  created_at DateTime  @default(now()) @db.Timestamp(6)
  employees  employees @relation(fields: [admin_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  badges     badges    @relation(fields: [badge_id], references: [badge_id], onDelete: Cascade, onUpdate: NoAction)
}

model badges {
  badge_id                                Int             @id @default(autoincrement())
  user_id                                 Int
  status                                  String          @default("pending") @db.VarChar(20)
  comment                                 String
  created_at                              DateTime        @default(now()) @db.Timestamp(6)
  updated_at                              DateTime        @default(now()) @db.Timestamp(6)
  receiver_id                             Int
  admin_actions                           admin_actions[]
  employees_badges_receiver_idToemployees employees       @relation("badges_receiver_idToemployees", fields: [receiver_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  employees_badges_user_idToemployees     employees       @relation("badges_user_idToemployees", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}
