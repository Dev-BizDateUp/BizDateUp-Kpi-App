generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model departments {
  id           Int            @id @default(autoincrement())
  name         String?        @unique
  designations designations[]
  employees    employees[]
}

model designations {
  id            Int          @id @default(autoincrement())
  name          String?      @unique
  department_id Int?
  departments   departments? @relation(fields: [department_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_designations_department")
  employees     employees[]
  kpis          kpis[]
}

model employees {
  id             Int              @id @default(autoincrement())
  employee_id    String?          @unique
  name           String
  department_id  Int?
  designation_id Int?
  company        String?
  employee_type  String?
  phone          String?
  email          String?
  image          String?
  status         String?
  departments    departments?     @relation(fields: [department_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_employees_department")
  designations   designations?    @relation(fields: [designation_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_employees_designation")
  kpi_values     kpi_values[]
  manager_review manager_review[]
}

model kpi_frequencies {
  id          Int           @id @default(autoincrement())
  name        String?       @unique
  kpi_periods kpi_periods[]
  kpis        kpis[]
}

model kpi_periods {
  id              Int              @id @default(autoincrement())
  frequency_id    Int?
  year            Int
  month           Int?
  quarter         Int?
  start_date      DateTime?        @db.Date
  end_date        DateTime?        @db.Date
  kpi_frequencies kpi_frequencies? @relation(fields: [frequency_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_kpi_periods_frequency")
  kpi_values      kpi_values[]
}

model kpi_values {
  id             Int          @id @default(autoincrement())
  kpi_id         Int?
  employee_id    Int?
  period_id      Int?
  value_achieved Float
  employees      employees?   @relation(fields: [employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_kpi_values_employee")
  kpis           kpis?        @relation(fields: [kpi_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_kpi_values_kpi")
  kpi_periods    kpi_periods? @relation(fields: [period_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_kpi_values_period")
}

model kpis {
  id               Int              @id @default(autoincrement())
  title            String
  description      String?
  frequency_id     Int?
  target           Float?
  designation_id   Int?
  green_threshold  Float?
  yellow_threshold Float?
  kpi_values       kpi_values[]
  designations     designations?    @relation(fields: [designation_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_kpis_designation")
  kpi_frequencies  kpi_frequencies? @relation(fields: [frequency_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_kpis_frequency")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model credentials {
  id       Int    @id @default(autoincrement())
  email    String @unique
  passhash String
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model manager_review {
  id           Int        @id @default(autoincrement())
  review_date  DateTime?  @db.Timestamptz(6)
  manager_name String?
  employee_id  Int?
  summary_kpi  String?
  strengths    String?
  improvement  String?
  comment      String?
  rating       String[]
  goals        String?
  employees    employees? @relation(fields: [employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
